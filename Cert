import hcl2

# File paths
input_file = "locals.tf"
output_file = "updated_locals.tf"

# New items to add
sa_key = "sa-sandbox-corp-apmf-2a94-fo@sandbox-corp-apmf-devl-2a04.iam.gserviceaccount.com"
sa_value = { "ttl": "1h" }

certs_key = "new-cert-tf"
certs_value = ["sa-sandbox-corp-new-user"]

# Step 1: Read the .tf file and parse
with open(input_file, "r") as f:
    obj = hcl2.load(f)

# Step 2: Access locals block (it is a list)
locals_block = obj['locals'][0]

# Step 3: Update sa block
if 'sa' in locals_block:
    locals_block['sa'][sa_key] = sa_value
else:
    locals_block['sa'] = { sa_key: sa_value }

# Step 4: Update certs block
if 'certs' in locals_block:
    locals_block['certs'][certs_key] = certs_value
else:
    locals_block['certs'] = { certs_key: certs_value }

# Step 5: Build new 'sa' block string — add commas except last
sa_items = list(locals_block['sa'].items())
sa_block = "sa = {\n"
for i, (key, value) in enumerate(sa_items):
    comma = "," if i < len(sa_items) - 1 else ""
    sa_block += f'  "{key}" = {{ ttl = "{value["ttl"]}" }}{comma}\n'
sa_block += "}\n"

# Step 6: Build new 'certs' block string — add commas except last
certs_items = list(locals_block['certs'].items())
certs_block = "certs = {\n"
for i, (key, value) in enumerate(certs_items):
    cert_list_str = ", ".join([f'"{v}"' for v in value])
    comma = "," if i < len(certs_items) - 1 else ""
    certs_block += f'  "{key}" = [{cert_list_str}]{comma}\n'
certs_block += "}\n"

# Step 7: Final locals block string
locals_text = f'locals {{\n\n{sa_block}\n\n{certs_block}\n\n}}\n'

# Step 8: Write updated file
with open(output_file, "w") as f:
    f.write(locals_text)

print("✅ Updated locals.tf written to", output_file)
